Description:  This template deploys a VPC, with a public and private subnet. It deploys an internet gateway,
  with a default route on the public subnet. It a NAT gateway, and default routes for them in the private subnet.

Parameters:
  UserName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  Subnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  Subnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  Keypair:
    Description: Keypair for resources
    Type: String

  MasterAmiId:
    Type: String
    Description: AMI Id for Master

  MasterInstanceType:
    Type: String
    Description: Instance Type of Master

  AgentAmiId:
    Type: String
    Description: AMI Id for Agent

  AgentInstanceType:
    Type: String
    Description: Instance Type of Agent

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref UserName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref UserName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref Subnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${UserName} Public Subnet (AZ1)

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref Subnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${UserName} Public Subnet (AZ2)

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${UserName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2

  CheckpointBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub pedl-${UserName}-${AWS::Region}-${AWS::AccountId}

  MasterSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      DestinationSecurityGroupId: !GetAtt AgentSecurityGroup.GroupId
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp

  MasterSecurityGroupInternet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      CidrIp: 0.0.0.0/0
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp

  MasterSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      FromPort: 8080
      ToPort: 8080
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt AgentSecurityGroup.GroupId

  MasterSecurityGroupIngressUI:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      FromPort: 8080
      ToPort: 8080
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0

  MasterSSHIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  AgentSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt AgentSecurityGroup.GroupId
      CidrIp: 0.0.0.0/0
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp

  AgentSecurityGroupIngressMaster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt AgentSecurityGroup.GroupId
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId

  AgentSecurityGroupIngressAgent:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt AgentSecurityGroup.GroupId
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt AgentSecurityGroup.GroupId


  AgentSSHIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt AgentSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0

  DatabaseEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt DatabaseSecurityGroup.GroupId
      CidrIp: 0.0.0.0/0
      FromPort: 0
      ToPort: 65535
      IpProtocol: -1

  DatabaseIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt DatabaseSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId

  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group For Master
      VpcId: !Ref VPC
      Tags:
        - Key: user
          Value: !Ref UserName

  AgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group For Agent
      VpcId: !Ref VPC
      Tags:
        - Key: user
          Value: !Ref UserName

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group For Database
      VpcId: !Ref VPC
      Tags:
        - Key: user
          Value: !Ref UserName

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: pedl-db-subnet-group
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      Tags:
        - Key: user
          Value: !Ref UserName

  Database:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      EngineMode: serverless
      DatabaseName: pedl
      DBClusterParameterGroupName: 'default.aurora-postgresql10'
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      MasterUsername: postgres
      MasterUserPassword: postgres
      Tags:
        - Key: user
          Value: !Ref UserName
      VpcSecurityGroupIds:
        - !GetAtt DatabaseSecurityGroup.GroupId


  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /determined/pedl-${UserName}/journald

  LogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref AgentRole
        - !Ref MasterRole
      PolicyName: agent-log-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - !Sub arn:aws:logs:*:*:log-group:/determined/pedl-${UserName}/journald,
              - !Sub arn:aws:logs:*:*:log-group:/determined/pedl-${UserName}/journald:log-stream:*

  MetricPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref AgentRole
        - !Ref MasterRole
      PolicyName: agent-metric-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - cloudwatch:PutMetricData
            Effect: Allow
            Resource: "*"

  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: agent-s3-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "s3:*"
                Resource: "*"
        - PolicyName: pedl-ec2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource: "*"

  AgentInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref AgentRole

  MasterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: pedl-agent-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:TerminateInstances
                  - ec2:CreateTags
                  - ec2:RunInstances
                Resource: "*"
        - PolicyName: pass-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: iam:PassRole
                Resource: !GetAtt AgentRole.Arn
        - PolicyName: master-log-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - arn:aws:logs:*:*:log-group:/determined/pedl/journald
                  - arn:aws:logs:*:*:log-group:/determined/pedl/journald:log-stream:*
        - PolicyName: master-metric-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - cloudwatch:PutMetricData
                Effect: Allow
                Resource: "*"
      Tags:
        - Key: user
          Value: !Ref UserName

  MasterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MasterRole

  MasterInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref Subnet1
      InstanceType: !Ref MasterInstanceType
      ImageId: !Ref MasterAmiId
      KeyName: !Ref Keypair
      IamInstanceProfile: !Ref MasterInstanceProfile
      SecurityGroupIds:
        - !Ref MasterSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash

          cat << EOF > /tmp/master.yaml
          checkpoint_storage:
            type: s3
            bucket: ${CheckpointBucket}
            save_experiment_best: 0
            save_trial_best: 1
            save_trial_latest: 1

          provisioner:
            agent_docker_network: pedl
            iam_instance_profile_arn: ${AgentInstanceProfile.Arn}
            image_id: ${AgentAmiId}
            instance_name: pedl-agent-${UserName}
            instance_type: ${AgentInstanceType}
            master_url: http://local-ipv4:8080
            max_idle_agent_period: 5m
            max_instances: 5
            network_interface:
              public_ip: true
              subnet_id: ${Subnet1}
              security_group_id: ${AgentSecurityGroup.GroupId}
            provider: aws
            root_volume_size: 200
            ssh_key_name: ${Keypair}
            startup_script: |
              cat << EOF > /tmp/journald-cloudwatch.conf
              log_group = "/determined/pedl-${UserName}/journald"
              EOF

              rm /etc/journald-cloudwatch.conf
              mv /tmp/journald-cloudwatch.conf /etc/journald-cloudwatch.conf
              systemctl restart journald-cloudwatch
            tag_key: pedl-${UserName}
            tag_value: pedl-${UserName}-agent
          EOF

          rm /usr/local/pedl/etc/master.yaml
          mv /tmp/master.yaml /usr/local/pedl/etc/master.yaml

          cat << EOF > /tmp/override.conf
          [Service]
          Environment="PEDL_DB_HOSTNAME=${Database.Endpoint.Address}"
          Environment="PEDL_DB_USER=postgres"
          Environment="PEDL_DB_NAME=pedl"
          Environment="PEDL_DB_PASSWORD=postgres"
          EOF

          mkdir /etc/systemd/system/pedl-master.service.d/
          mv /tmp/override.conf /etc/systemd/system/pedl-master.service.d/override.conf

          cat << EOF > /tmp/journald-cloudwatch.conf
          log_group = "/determined/pedl-${UserName}/journald"
          field_length = 1000
          EOF

          rm /etc/journald-cloudwatch.conf
          mv /tmp/journald-cloudwatch.conf /etc/journald-cloudwatch.conf
          systemctl restart journald-cloudwatch
          cd /usr/local/pedl/
          make enable-master

          --//
      Tags:
        - Key: user
          Value: !Ref UserName
        - Key: Name
          Value: !Sub pedl-${UserName}-master

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  SubnetId:
    Description: A list of the public subnets
    Value: !Ref Subnet1

  MasterId:
    Description: Id of Master Agent
    Value: !Ref MasterInstance

  MasterSecurityGroupId:
    Description: Id of Master Security Group
    Value: !GetAtt MasterSecurityGroup.GroupId

  AgentSecurityGroupId:
    Description: Id of Agent Security Group
    Value: !GetAtt AgentSecurityGroup.GroupId

  AgentInstanceProfile:
    Description: Instance Profile for Agent
    Value: !GetAtt AgentInstanceProfile.Arn

  CheckpointBucket:
    Description: S3 Bucket for checkpoints
    Value: !Ref CheckpointBucket
